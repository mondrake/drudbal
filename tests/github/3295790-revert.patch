diff --git a/core/lib/Drupal/Core/EventSubscriber/FinishResponseSubscriber.php b/core/lib/Drupal/Core/EventSubscriber/FinishResponseSubscriber.php
index 8dc9bac392e..b5fc2aaf25a 100644
--- a/core/lib/Drupal/Core/EventSubscriber/FinishResponseSubscriber.php
+++ b/core/lib/Drupal/Core/EventSubscriber/FinishResponseSubscriber.php
@@ -12,7 +12,6 @@
 use Drupal\Core\Site\Settings;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpFoundation\StreamedResponse;
 use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -299,21 +298,6 @@ protected function setExpiresNoCache(Response $response) {
     $response->setExpires(\DateTime::createFromFormat('j-M-Y H:i:s T', '19-Nov-1978 05:00:00 UTC'));
   }
 
-  /**
-   * Sets the Content-Length header on the response.
-   *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
-   *   The event to process.
-   */
-  public function setContentLengthHeader(ResponseEvent $event): void {
-    $response = $event->getResponse();
-    if ($response instanceof StreamedResponse) {
-      return;
-    }
-
-    $response->headers->set('Content-Length', strlen($response->getContent()), TRUE);
-  }
-
   /**
    * Registers the methods in this class that should be listeners.
    *
@@ -325,10 +309,6 @@ public static function getSubscribedEvents(): array {
     // There is no specific reason for choosing 16 beside it should be executed
     // before ::onRespond().
     $events[KernelEvents::RESPONSE][] = ['onAllResponds', 16];
-    // Run very late, after all other response subscribers have run. However,
-    // any response subscribers that convert a response to a streamed response
-    // must run after this and undo what this does.
-    $events[KernelEvents::RESPONSE][] = ['setContentLengthHeader', -1024];
     return $events;
   }
 
diff --git a/core/misc/cspell/dictionary.txt b/core/misc/cspell/dictionary.txt
index ec6dd524716..356677a4bce 100644
--- a/core/misc/cspell/dictionary.txt
+++ b/core/misc/cspell/dictionary.txt
@@ -612,6 +612,7 @@ linkset
 linktext
 lisu
 litespeed
+litererally
 llamaids
 llamasarelame
 llamma
diff --git a/core/modules/big_pipe/src/EventSubscriber/HtmlResponseBigPipeSubscriber.php b/core/modules/big_pipe/src/EventSubscriber/HtmlResponseBigPipeSubscriber.php
index 03e1d4261cd..e818522a69f 100644
--- a/core/modules/big_pipe/src/EventSubscriber/HtmlResponseBigPipeSubscriber.php
+++ b/core/modules/big_pipe/src/EventSubscriber/HtmlResponseBigPipeSubscriber.php
@@ -82,8 +82,6 @@ public function onRespond(ResponseEvent $event) {
       $content = $response->getContent();
       $content = str_replace('<drupal-big-pipe-scripts-bottom-marker>', '', $content);
       $response->setContent($content);
-      // FinishResponseSubscriber::setContentLengthHeader() already ran.
-      $response->headers->set('Content-Length', strlen($content), TRUE);
     }
 
     // If there are neither BigPipe placeholders nor no-JS BigPipe placeholders,
@@ -95,10 +93,6 @@ public function onRespond(ResponseEvent $event) {
 
     $big_pipe_response = new BigPipeResponse($response);
     $big_pipe_response->setBigPipeService($this->getBigPipeService($event));
-
-    // A BigPipe response's length is impossible to predict.
-    $big_pipe_response->headers->remove('Content-Length');
-
     $event->setResponse($big_pipe_response);
   }
 
diff --git a/core/modules/jsonapi/tests/src/Functional/JsonApiRegressionTest.php b/core/modules/jsonapi/tests/src/Functional/JsonApiRegressionTest.php
index 3dc853f61da..a779ca9a0ec 100644
--- a/core/modules/jsonapi/tests/src/Functional/JsonApiRegressionTest.php
+++ b/core/modules/jsonapi/tests/src/Functional/JsonApiRegressionTest.php
@@ -1300,13 +1300,10 @@ public function testNonCacheableMethods() {
     $methods = [
       'HEAD',
       'GET',
+      'PATCH',
+      'DELETE',
     ];
-    foreach ($methods as $method) {
-      $response = $this->request($method, Url::fromUri('internal:/jsonapi/node/article/' . $node->uuid()), $base_request_options);
-      $this->assertSame(200, $response->getStatusCode());
-    }
-
-    $patch_request_options = $base_request_options + [
+    $non_post_request_options = $base_request_options + [
       RequestOptions::JSON => [
         'data' => [
           'type' => 'node--article',
@@ -1314,11 +1311,10 @@ public function testNonCacheableMethods() {
         ],
       ],
     ];
-    $response = $this->request('PATCH', Url::fromUri('internal:/jsonapi/node/article/' . $node->uuid()), $patch_request_options);
-    $this->assertSame(200, $response->getStatusCode());
-
-    $response = $this->request('DELETE', Url::fromUri('internal:/jsonapi/node/article/' . $node->uuid()), $base_request_options);
-    $this->assertSame(204, $response->getStatusCode());
+    foreach ($methods as $method) {
+      $response = $this->request($method, Url::fromUri('internal:/jsonapi/node/article/' . $node->uuid()), $non_post_request_options);
+      $this->assertSame($method === 'DELETE' ? 204 : 200, $response->getStatusCode());
+    }
 
     $post_request_options = $base_request_options + [
       RequestOptions::JSON => [
diff --git a/core/modules/jsonapi/tests/src/Functional/NodeTest.php b/core/modules/jsonapi/tests/src/Functional/NodeTest.php
index d0893201e1a..9c9f5b16c60 100644
--- a/core/modules/jsonapi/tests/src/Functional/NodeTest.php
+++ b/core/modules/jsonapi/tests/src/Functional/NodeTest.php
@@ -393,15 +393,11 @@ protected function assertCacheableNormalizations(): void {
     $request_options = $this->getAuthenticationRequestOptions();
     $request_options[RequestOptions::QUERY] = ['fields' => ['node--camelids' => 'title']];
     $this->request('GET', $url, $request_options);
-    // Cacheable normalizations are written after the response is flushed to
-    // the client; give the server a chance to complete this work.
-    sleep(1);
     // Ensure the normalization cache is being incrementally built. After
     // requesting the title, only the title is in the cache.
     $this->assertNormalizedFieldsAreCached(['title']);
     $request_options[RequestOptions::QUERY] = ['fields' => ['node--camelids' => 'field_rest_test']];
     $this->request('GET', $url, $request_options);
-    sleep(1);
     // After requesting an additional field, then that field is in the cache and
     // the old one is still there.
     $this->assertNormalizedFieldsAreCached(['title', 'field_rest_test']);
diff --git a/core/modules/language/tests/src/Functional/ConfigurableLanguageManagerTest.php b/core/modules/language/tests/src/Functional/ConfigurableLanguageManagerTest.php
index 2c1f529f504..9bc09517ce2 100644
--- a/core/modules/language/tests/src/Functional/ConfigurableLanguageManagerTest.php
+++ b/core/modules/language/tests/src/Functional/ConfigurableLanguageManagerTest.php
@@ -266,16 +266,4 @@ public function testUserProfileTranslationWithPreferredAdminLanguage() {
     $assert_session->pageTextNotContains($field_label_es);
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  protected function drupalGet($path, array $options = [], array $headers = []) {
-    $response = parent::drupalGet($path, $options, $headers);
-    // The \Drupal\locale\LocaleTranslation service clears caches after the
-    // response is flushed to the client; wait for Drupal to perform its
-    // termination work before continuing.
-    sleep(1);
-    return $response;
-  }
-
 }
diff --git a/core/modules/locale/tests/src/Functional/LocaleLocaleLookupTest.php b/core/modules/locale/tests/src/Functional/LocaleLocaleLookupTest.php
index 5b43ad50bf1..9ba855d1f15 100644
--- a/core/modules/locale/tests/src/Functional/LocaleLocaleLookupTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleLocaleLookupTest.php
@@ -68,11 +68,6 @@ public function testLanguageFallbackDefaults() {
    * @dataProvider providerTestFixOldPluralStyle
    */
   public function testFixOldPluralStyle($translation_value, $expected) {
-    // The \Drupal\locale\LocaleTranslation service stores localization cache
-    // data after the response is flushed to the client. We do not want to race
-    // with any string translations that may be saving from the login in
-    // ::setUp().
-    sleep(1);
     $string_storage = \Drupal::service('locale.storage');
     $string = $string_storage->findString(['source' => 'Member for', 'context' => '']);
     $lid = $string->getId();
diff --git a/core/modules/path/tests/src/Functional/PathAliasTest.php b/core/modules/path/tests/src/Functional/PathAliasTest.php
index f6ebeb9be32..1c8873344be 100644
--- a/core/modules/path/tests/src/Functional/PathAliasTest.php
+++ b/core/modules/path/tests/src/Functional/PathAliasTest.php
@@ -66,9 +66,6 @@ public function testPathCache() {
     \Drupal::cache('data')->deleteAll();
     // Make sure the path is not converted to the alias.
     $this->drupalGet(trim($edit['path[0][value]'], '/'), ['alias' => TRUE]);
-    // The \Drupal\path_alias\AliasWhitelist service performs cache clears after
-    // Drupal has flushed the response to the client; wait for this to finish.
-    sleep(1);
     $this->assertNotEmpty(\Drupal::cache('data')->get('preload-paths:' . $edit['path[0][value]']), 'Cache entry was created.');
 
     // Visit the alias for the node and confirm a cache entry is created.
@@ -76,7 +73,6 @@ public function testPathCache() {
     // @todo Remove this once https://www.drupal.org/node/2480077 lands.
     Cache::invalidateTags(['rendered']);
     $this->drupalGet(trim($edit['alias[0][value]'], '/'));
-    sleep(1);
     $this->assertNotEmpty(\Drupal::cache('data')->get('preload-paths:' . $edit['path[0][value]']), 'Cache entry was created.');
   }
 
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index fae06ecc272..af5c8634166 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -501,17 +501,6 @@ function system_requirements($phase) {
     }
   }
 
-  if ($phase === 'runtime') {
-    if (!function_exists('fastcgi_finish_request') && !function_exists('litespeed_finish_request') && !ob_get_status()) {
-      $requirements['output_buffering'] = [
-        'title' => t('Output Buffering'),
-        'error_value' => t('Not enabled'),
-        'severity' => REQUIREMENT_WARNING,
-        'description' => t('<a href="https://www.php.net/manual/en/function.ob-start.php">Output buffering</a> is not enabled. This may degrade Drupal\'s performance. You can enable output buffering by default <a href="https://www.php.net/manual/en/outcontrol.configuration.php#ini.output-buffering">in your PHP settings</a>.'),
-      ];
-    }
-  }
-
   if ($phase == 'install' || $phase == 'update') {
     // Test for PDO (database).
     $requirements['database_extensions'] = [
diff --git a/core/modules/system/tests/modules/destructable_test/destructable_test.info.yml b/core/modules/system/tests/modules/destructable_test/destructable_test.info.yml
deleted file mode 100644
index ed91a243987..00000000000
--- a/core/modules/system/tests/modules/destructable_test/destructable_test.info.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-name: 'Tests for DestructableInterface'
-type: module
-description: 'Provides test services which implement DestructableInterface.'
-package: Testing
-version: VERSION
diff --git a/core/modules/system/tests/modules/destructable_test/destructable_test.routing.yml b/core/modules/system/tests/modules/destructable_test/destructable_test.routing.yml
deleted file mode 100644
index 51eaae2d4b7..00000000000
--- a/core/modules/system/tests/modules/destructable_test/destructable_test.routing.yml
+++ /dev/null
@@ -1,7 +0,0 @@
-destructable:
-  path: '/destructable'
-  defaults:
-    _controller: '\Drupal\destructable_test\Controller\CallsDestructableServiceController::render'
-    _title: 'Calls destructable service'
-  requirements:
-    _access: 'TRUE'
diff --git a/core/modules/system/tests/modules/destructable_test/destructable_test.services.yml b/core/modules/system/tests/modules/destructable_test/destructable_test.services.yml
deleted file mode 100644
index 316ce275d04..00000000000
--- a/core/modules/system/tests/modules/destructable_test/destructable_test.services.yml
+++ /dev/null
@@ -1,4 +0,0 @@
-services:
-  Drupal\destructable_test\Destructable:
-    tags:
-      - { name: needs_destruction }
diff --git a/core/modules/system/tests/modules/destructable_test/src/Controller/CallsDestructableServiceController.php b/core/modules/system/tests/modules/destructable_test/src/Controller/CallsDestructableServiceController.php
deleted file mode 100644
index 42b1e25def8..00000000000
--- a/core/modules/system/tests/modules/destructable_test/src/Controller/CallsDestructableServiceController.php
+++ /dev/null
@@ -1,45 +0,0 @@
-<?php
-
-namespace Drupal\destructable_test\Controller;
-
-use Drupal\Core\Controller\ControllerBase;
-use Drupal\destructable_test\Destructable;
-use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpFoundation\Response;
-
-/**
- * Controller to instantiate the destructable service.
- */
-final class CallsDestructableServiceController extends ControllerBase {
-
-  /**
-   * Destructable service.
-   *
-   * @var \Drupal\destructable_test\Destructable
-   */
-  protected $destructable;
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function create(ContainerInterface $container) {
-    return new static($container->get(Destructable::class));
-  }
-
-  public function __construct(Destructable $destructable) {
-    $this->destructable = $destructable;
-  }
-
-  /**
-   * Render callback.
-   *
-   * @return \Symfony\Component\HttpFoundation\Response
-   *   Response.
-   */
-  public function render(Request $request): Response {
-    $this->destructable->setSemaphore($request->query->get('semaphore'));
-    return new Response('This is a longer-ish string of content to send to the client, to invoke any trivial transfer buffers both on the server and client side.');
-  }
-
-}
diff --git a/core/modules/system/tests/modules/destructable_test/src/Destructable.php b/core/modules/system/tests/modules/destructable_test/src/Destructable.php
deleted file mode 100644
index 210adc70aca..00000000000
--- a/core/modules/system/tests/modules/destructable_test/src/Destructable.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-namespace Drupal\destructable_test;
-
-use Drupal\Core\DestructableInterface;
-
-final class Destructable implements DestructableInterface {
-
-  /**
-   * Semaphore filename.
-   *
-   * @var string
-   */
-  protected string $semaphore;
-
-  /**
-   * Set the destination for the semaphore file.
-   *
-   * @param string $semaphore
-   *   Temporary file to set a semaphore flag.
-   */
-  public function setSemaphore(string $semaphore): void {
-    $this->semaphore = $semaphore;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function destruct() {
-    sleep(3);
-    file_put_contents($this->semaphore, 'ran');
-  }
-
-}
diff --git a/core/modules/system/tests/modules/system_test/src/Controller/SystemTestController.php b/core/modules/system/tests/modules/system_test/src/Controller/SystemTestController.php
index b806e582d6a..03f44fec4ba 100644
--- a/core/modules/system/tests/modules/system_test/src/Controller/SystemTestController.php
+++ b/core/modules/system/tests/modules/system_test/src/Controller/SystemTestController.php
@@ -332,8 +332,8 @@ public function shutdownFunctions($arg1, $arg2) {
     // the exception message can not be tested.
     // @see _drupal_shutdown_function()
     // @see \Drupal\system\Tests\System\ShutdownFunctionsTest
-    if (function_exists('fastcgi_finish_request') || ob_get_status()) {
-      return ['#markup' => 'The response will flush before shutdown functions are called.'];
+    if (function_exists('fastcgi_finish_request')) {
+      return ['#markup' => 'The function fastcgi_finish_request exists when serving the request.'];
     }
     return [];
   }
diff --git a/core/modules/system/tests/src/Functional/System/ShutdownFunctionsTest.php b/core/modules/system/tests/src/Functional/System/ShutdownFunctionsTest.php
index 7c36abd3816..6d7798721c7 100644
--- a/core/modules/system/tests/src/Functional/System/ShutdownFunctionsTest.php
+++ b/core/modules/system/tests/src/Functional/System/ShutdownFunctionsTest.php
@@ -42,18 +42,18 @@ public function testShutdownFunctions() {
     $arg2 = $this->randomMachineName();
     $this->drupalGet('system-test/shutdown-functions/' . $arg1 . '/' . $arg2);
 
-    // If using PHP-FPM or output buffering, the response will be flushed to
-    // the client before shutdown functions have fired.
+    // If using PHP-FPM then fastcgi_finish_request() will have been fired
+    // returning the response before shutdown functions have fired.
     // @see \Drupal\system_test\Controller\SystemTestController::shutdownFunctions()
-    $response_will_flush = strpos($this->getSession()->getPage()->getContent(), 'The response will flush before shutdown functions are called.');
-    if ($response_will_flush) {
+    $server_using_fastcgi = strpos($this->getSession()->getPage()->getContent(), 'The function fastcgi_finish_request exists when serving the request.');
+    if ($server_using_fastcgi) {
       // We need to wait to ensure that the shutdown functions have fired.
       sleep(1);
     }
     $this->assertEquals([$arg1, $arg2], \Drupal::state()->get('_system_test_first_shutdown_function'));
     $this->assertEquals([$arg1, $arg2], \Drupal::state()->get('_system_test_second_shutdown_function'));
 
-    if (!$response_will_flush) {
+    if (!$server_using_fastcgi) {
       // Make sure exceptions displayed through
       // \Drupal\Core\Utility\Error::renderExceptionSafe() are correctly
       // escaped.
diff --git a/core/tests/Drupal/FunctionalTests/HttpKernel/DestructableServiceTest.php b/core/tests/Drupal/FunctionalTests/HttpKernel/DestructableServiceTest.php
deleted file mode 100644
index 38cad0a6385..00000000000
--- a/core/tests/Drupal/FunctionalTests/HttpKernel/DestructableServiceTest.php
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-namespace Drupal\FunctionalTests\HttpKernel;
-
-use Drupal\Core\File\FileSystemInterface;
-use Drupal\Core\Url;
-use Drupal\Tests\BrowserTestBase;
-
-/**
- * Tests invocation of services performing deferred tasks after response flush.
- *
- * @see \Drupal\Core\DestructableInterface
- *
- * @group Http
- */
-class DestructableServiceTest extends BrowserTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected static $modules = ['system', 'destructable_test'];
-
-  /**
-   * {@inheritdoc}
-   */
-  protected $defaultTheme = 'stark';
-
-  public function testDestructableServiceExecutionOrder(): void {
-    $file_system = $this->container->get('file_system');
-    assert($file_system instanceof FileSystemInterface);
-    $semaphore = $file_system
-      ->tempnam($file_system->getTempDirectory(), 'destructable_semaphore');
-    $this->drupalGet(Url::fromRoute('destructable', [], ['query' => ['semaphore' => $semaphore]]));
-    // This should be false as the response should flush before running the
-    // test service.
-    $this->assertEmpty(file_get_contents($semaphore), 'Destructable service did not run when response flushed to client.');
-    // The destructable service will sleep for 3 seconds, then run.
-    // To ensure no race conditions on slow test runners, wait another 3s.
-    sleep(6);
-    $this->assertTrue(file_get_contents($semaphore) === 'ran', 'Destructable service did run.');
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/ApiRequestTrait.php b/core/tests/Drupal/Tests/ApiRequestTrait.php
index 83888277415..9a5431a2c7e 100644
--- a/core/tests/Drupal/Tests/ApiRequestTrait.php
+++ b/core/tests/Drupal/Tests/ApiRequestTrait.php
@@ -37,12 +37,6 @@ trait ApiRequestTrait {
    * @see \GuzzleHttp\ClientInterface::request()
    */
   protected function makeApiRequest($method, Url $url, array $request_options) {
-    // HEAD requests do not have bodies. If one is specified, Guzzle will not
-    // ignore it and the request will be treated as GET with an overridden
-    // method string, and libcurl will expect to read a response body.
-    if ($method === 'HEAD' && array_key_exists('body', $request_options)) {
-      unset($request_options['body']);
-    }
     $this->refreshVariables();
     $request_options[RequestOptions::HTTP_ERRORS] = FALSE;
     $request_options[RequestOptions::ALLOW_REDIRECTS] = FALSE;
